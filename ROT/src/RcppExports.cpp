// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// barycenter_unbalanced_stabilized
arma::mat barycenter_unbalanced_stabilized(arma::mat A, arma::mat M, arma::vec weights, double reg, double reg_m, int numItermax, double stopThr, bool verbose);
RcppExport SEXP _ROT_barycenter_unbalanced_stabilized(SEXP ASEXP, SEXP MSEXP, SEXP weightsSEXP, SEXP regSEXP, SEXP reg_mSEXP, SEXP numItermaxSEXP, SEXP stopThrSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type reg_m(reg_mSEXP);
    Rcpp::traits::input_parameter< int >::type numItermax(numItermaxSEXP);
    Rcpp::traits::input_parameter< double >::type stopThr(stopThrSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(barycenter_unbalanced_stabilized(A, M, weights, reg, reg_m, numItermax, stopThr, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dists
arma::mat dists(arma::vec a, arma::vec b, int k, int dimention);
RcppExport SEXP _ROT_dists(SEXP aSEXP, SEXP bSEXP, SEXP kSEXP, SEXP dimentionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type dimention(dimentionSEXP);
    rcpp_result_gen = Rcpp::wrap(dists(a, b, k, dimention));
    return rcpp_result_gen;
END_RCPP
}
// dist_mat
arma::mat dist_mat(arma::mat a, arma::mat b, int k, int square);
RcppExport SEXP _ROT_dist_mat(SEXP aSEXP, SEXP bSEXP, SEXP kSEXP, SEXP squareSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type square(squareSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mat(a, b, k, square));
    return rcpp_result_gen;
END_RCPP
}
// pat_uot
arma::mat pat_uot(arma::vec a, arma::vec b, arma::mat dab, double reg, int numItemax, double stopThr);
RcppExport SEXP _ROT_pat_uot(SEXP aSEXP, SEXP bSEXP, SEXP dabSEXP, SEXP regSEXP, SEXP numItemaxSEXP, SEXP stopThrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dab(dabSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    Rcpp::traits::input_parameter< int >::type numItemax(numItemaxSEXP);
    Rcpp::traits::input_parameter< double >::type stopThr(stopThrSEXP);
    rcpp_result_gen = Rcpp::wrap(pat_uot(a, b, dab, reg, numItemax, stopThr));
    return rcpp_result_gen;
END_RCPP
}
// pat_uot_was
double pat_uot_was(arma::vec a, arma::vec b, arma::mat dab, double reg);
RcppExport SEXP _ROT_pat_uot_was(SEXP aSEXP, SEXP bSEXP, SEXP dabSEXP, SEXP regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dab(dabSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    rcpp_result_gen = Rcpp::wrap(pat_uot_was(a, b, dab, reg));
    return rcpp_result_gen;
END_RCPP
}
// sinkhorn_knopp_unbalanced
arma::mat sinkhorn_knopp_unbalanced(arma::vec a, arma::vec b, arma::mat dab, double reg, double reg_m, int numItermax, double stopThr);
RcppExport SEXP _ROT_sinkhorn_knopp_unbalanced(SEXP aSEXP, SEXP bSEXP, SEXP dabSEXP, SEXP regSEXP, SEXP reg_mSEXP, SEXP numItermaxSEXP, SEXP stopThrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dab(dabSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type reg_m(reg_mSEXP);
    Rcpp::traits::input_parameter< int >::type numItermax(numItermaxSEXP);
    Rcpp::traits::input_parameter< double >::type stopThr(stopThrSEXP);
    rcpp_result_gen = Rcpp::wrap(sinkhorn_knopp_unbalanced(a, b, dab, reg, reg_m, numItermax, stopThr));
    return rcpp_result_gen;
END_RCPP
}
// sinkhorn_knopp_unbalanced_was
double sinkhorn_knopp_unbalanced_was(arma::vec a, arma::vec b, arma::mat dab, double reg, double reg_m);
RcppExport SEXP _ROT_sinkhorn_knopp_unbalanced_was(SEXP aSEXP, SEXP bSEXP, SEXP dabSEXP, SEXP regSEXP, SEXP reg_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dab(dabSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type reg_m(reg_mSEXP);
    rcpp_result_gen = Rcpp::wrap(sinkhorn_knopp_unbalanced_was(a, b, dab, reg, reg_m));
    return rcpp_result_gen;
END_RCPP
}
// sinkhorn_stabilized
arma::mat sinkhorn_stabilized(arma::vec a, arma::vec b, arma::mat dab, double reg, double reg_m, double tau, int numltermax, double stopThr);
RcppExport SEXP _ROT_sinkhorn_stabilized(SEXP aSEXP, SEXP bSEXP, SEXP dabSEXP, SEXP regSEXP, SEXP reg_mSEXP, SEXP tauSEXP, SEXP numltermaxSEXP, SEXP stopThrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dab(dabSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type reg_m(reg_mSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type numltermax(numltermaxSEXP);
    Rcpp::traits::input_parameter< double >::type stopThr(stopThrSEXP);
    rcpp_result_gen = Rcpp::wrap(sinkhorn_stabilized(a, b, dab, reg, reg_m, tau, numltermax, stopThr));
    return rcpp_result_gen;
END_RCPP
}
// sinkhorn_stabilized_was
double sinkhorn_stabilized_was(arma::vec a, arma::vec b, arma::mat dab, double reg, double reg_m);
RcppExport SEXP _ROT_sinkhorn_stabilized_was(SEXP aSEXP, SEXP bSEXP, SEXP dabSEXP, SEXP regSEXP, SEXP reg_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dab(dabSEXP);
    Rcpp::traits::input_parameter< double >::type reg(regSEXP);
    Rcpp::traits::input_parameter< double >::type reg_m(reg_mSEXP);
    rcpp_result_gen = Rcpp::wrap(sinkhorn_stabilized_was(a, b, dab, reg, reg_m));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ROT_barycenter_unbalanced_stabilized", (DL_FUNC) &_ROT_barycenter_unbalanced_stabilized, 8},
    {"_ROT_dists", (DL_FUNC) &_ROT_dists, 4},
    {"_ROT_dist_mat", (DL_FUNC) &_ROT_dist_mat, 4},
    {"_ROT_pat_uot", (DL_FUNC) &_ROT_pat_uot, 6},
    {"_ROT_pat_uot_was", (DL_FUNC) &_ROT_pat_uot_was, 4},
    {"_ROT_sinkhorn_knopp_unbalanced", (DL_FUNC) &_ROT_sinkhorn_knopp_unbalanced, 7},
    {"_ROT_sinkhorn_knopp_unbalanced_was", (DL_FUNC) &_ROT_sinkhorn_knopp_unbalanced_was, 5},
    {"_ROT_sinkhorn_stabilized", (DL_FUNC) &_ROT_sinkhorn_stabilized, 8},
    {"_ROT_sinkhorn_stabilized_was", (DL_FUNC) &_ROT_sinkhorn_stabilized_was, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ROT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
